@use '../../styles/lib/merge';
@use '../../styles/lib/refs';
@import '../component';

$__stylesheet__: (
	name: custom-field,
);
$states: merge.deep(
	$COMPONENT_STATES,
	(
		valid: valid,
		invalid: invalid,
		invalid-focused: (
			(invalid, focused),
		),
		invalid-hovered: (
			(invalid, hovered),
		),
		invalid-focused-hovered: (
			(invalid, focused, hovered),
		),
	)
);

@mixin input-field-mixin($module) {
	@include use-background-color($module);
	@include use-border-size($module);
	@include use-shadow($module);
	@include use-padding-top($module);
	@include use-padding-bottom($module);
	@include use-padding-right($module);
	@include use-padding-left($module);
	@include use-radius($module);

	box-sizing: border-box;
	transition: outline 75ms ease-in-out;

	@include use-outline(#{$module});

	&::placeholder {
		@include use-text-color(#{$module}-placeholder);
	}

	&:hover {
		@include use-outline(name(#{$module}-input), state(hovered));
	}

	&:focus {
		@include use-outline(name(#{$module}-input), state(focused));
		@include use-background-color(name(#{$module}-input), state(focused));
	}

	&[data-is-invalid='true'] {
		@include use-outline(name(#{$module}-input), state(invalid));

		&:hover {
			@include use-outline(name(#{$module}-input), state(invalid-hovered));
		}

		&:focus {
			@include use-outline(name(#{$module}-input), state(invalid-focused));

			&:hover {
				@include use-outline(name(#{$module}-input), state(invalid-focused-hovered));
			}
		}
	}
}

.root {
	display: inline-block;

	.layout {
		display: flex;
		width: 100%;
	}

	.container {
		width: 100%;
	}

	.label {
		display: flex;
		flex-direction: row;
		align-items: center;
		align-content: center;
		gap: 0.5em;
		user-select: none;
		padding: 0 0 0.5em;
		cursor: pointer;

		@include use-text-color(name(label));

		.text {
			display: flex;
			align-items: center;
			gap: 0.15em;

			.requiredIndicator {
				&::after {
					content: '*';
					opacity: 0.5;
				}
			}

			.icon {
				display: flex;
				@include use-text-color(name(icon));
			}
		}

		.inputField {
			display: flex;

			.inputFieldContainer {
				// flex-grow: 1;
				background-color: red;
				display: flex;
				flex-direction: column;
			}
		}
	}

	.input {
		width: 100%;
		@include input-field-mixin(name(input));
	}

	.validation {
		font-size: 0.75em;
		padding: 0.5em 0;
		opacity: 1;
		transition: opacity 275ms ease-in;

		@include use-text-color(name(validation));

		&.showValidation {
			visibility: visible;
			opacity: 1;
		}
	}

	&[data-is-invalid='true'] {
		.label {
			@include use-text-color(name(label), state(invalid));
		}

		.input {
			@include use-outline(name(input), state(invalid));
		}
	}

	&[data-is-valid='true'] {
		.label {
			@include use-text-color(name(label), state(invalid));

			.text {
				.requiredIndicator {
					&::after {
						display: none;
					}
				}
			}
		}
	}

	#{refs.use(custom-field-background-color)}: #fff;
	#{refs.use(custom-field-label-text-color)}: #da0;
	#{refs.use(custom-field-validation-text-color)}: #f00;
	#{refs.use(custom-field-input-placeholder-text-color)}: #c0c0c0;
	#{refs.use(custom-field-input-border-size)}: 0;
	#{refs.use(custom-field-input-shadow)}: 0 0 1em lightgray;
	#{refs.use(custom-field-input-padding-top)}: 1em;
	#{refs.use(custom-field-input-padding-bottom)}: 1em;
	#{refs.use(custom-field-input-padding-right)}: 1em;
	#{refs.use(custom-field-input-padding-left)}: 1em;
	#{refs.use(custom-field-input-radius)}: 6px;
	#{refs.use(custom-field-input-outline)}: 2px solid #b0b0b0;
	#{refs.use(custom-field-input-outline__hover)}: 2px solid #b0b0b0;
	#{refs.use(custom-field-input-outline__focused)}: 2px solid #d0d0d0;
	#{refs.use(custom-field-input-outline__invalid)}: 1px solid #c00;
	#{refs.use(custom-field-input-outline__invalid__focused)}: 2px solid red;
	#{refs.use(custom-field-input-outline__invalid__hovered)}: 2px solid #f00;
	#{refs.use(custom-field-input-outline__invalid__focused__hovered)}: 2px solid #a00;
}
