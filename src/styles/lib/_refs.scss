// stylelint-disable scss/at-function-pattern
@use 'sass:string';
@import '../config';

@function prefix($prefix) {
	$path: #{$theme-namespace-prefix}#{if(
			string.length($prefix) > 0,
			-#{$prefix},
			''
		)};

	@return $path;
}

// @private create-css-ref
@function -to-css-ref($key, $prefix: '') {
	@return to-css-var(#{$prefix}-#{$key});
}

// @public create-css-var
@function to-css-var($var) {
	@return #{'--'}#{$var};
}

// @public use existing ref
@function use($key, $prefix: '') {
	@return -to-css-ref($key, prefix($prefix));
}

// @public ref
// create a css ref, used to populate pre-declared theme points
@function ref($key, $prefix: '') {
	@return #{var(-to-css-ref($key, prefix($prefix)))};
}

// global-ref
// create a css var which is mapped to a global variable
@function globalRef($key) {
	@return ref($key, $theme-global-prefix);
}

// ref with component-specific namespace and states
@function compRef($ns, $key, $state: '', $prefix: $theme-namespace-prefix) {
	$compState: '';

	@if string.length($state) > 0 {
		$compState: $state;
	}

	@return #{var(
			-to-css-ref(#{$key}#{$compState}, #{$prefix}-#{$ns}),
			var(to-css-var(#{$key}#{$compState}))
		)};
}

// create property decleration mapped to component specific css ref with states
// used to define theme points in component style implementation
@mixin use($cssProperty, $themeProperty, $varName: 'generic', $state: '') {
	#{$cssProperty}: compRef($varName, $themeProperty, $state);
}
