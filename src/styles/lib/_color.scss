@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:color';

@function hexToRgb($hex) {
	$r: color.red($hex);
	$g: color.green($hex);
	$b: color.blue($hex);

	@return ($r, $g, $b);
}

@function luminance($hex) {
	$rgb: hexToRgb($hex);
	$r: calc(list.nth($rgb, 1) / 255);
	$g: calc(list.nth($rgb, 2) / 255);
	$b: calc(list.nth($rgb, 3) / 255);

	// calculate luminance
	$r: if(
		$r <= 0.0393,
		calc($r / 12.92),
		math.pow(calc(($r + 0.055) / 1.055), 2.4)
	);
	$g: if($g <= 0.0393, calc($g / 12.92), math.div($g + 0.055, 1.055));
	$b: if($b <= 0.0393, calc($b / 12.92), math.div($b + 0.055, 1.055));

	@return 0.2126 * $r + 0.7152 * $g + 0.0722 * $b;
}

@function contrastRatio($color1, $color2) {
	$l1: luminance($color1) + 0.05;
	$l2: luminance($color2) + 0.05;
	$contrast: if($l1 > $l2, calc($l1 / $l2), calc($l2 / $l1));

	@return $contrast;
}

@function generate($colors, $prefix: config.$theme-namespace-prefix) {
	$color-palette: ();

	@each $key, $value in $colors {
		$primary: $value;
		$light: color.adjust($primary, $lightness: 20%);
		$dark: color.adjust($primary, $lightness: -20%);

		// $light: lighten($primary, 20%);
		// $dark: darken($primary, 20%);

		$contrastRatio: contrastRatio($value, #000);
		$contrast: if($contrastRatio >= 12.95, #000, #fff);
		$color-palette: map.merge(
			$color-palette,
			(
				#{$prefix}-#{$key}-main: $primary,
				#{$prefix}-#{$key}-light: $light,
				#{$prefix}-#{$key}-dark: $dark,
				#{$prefix}-#{$key}-contrast: $contrast
			)
		);
	}

	@return $color-palette;
}
