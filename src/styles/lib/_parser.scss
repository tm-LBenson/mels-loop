@use "sass:string";
@use "sass:list";
@use "refs";
@use "styles/config";

$defaultStateDelim: config.$theme-state-delim;

@function _isEmptyVarMap($vars) {
	@return (type-of($vars) == "list") and (length($vars) == 0);
}

@function _removeNth($list, $nth) {
	$result: ();
	$nth: if($nth < 0, length($list) + $nth + 1, $nth);
	$bracketed: is-bracketed($list);
	$separator: list-separator($list);

	@for $i from 1 through length($list) {
		@if $i != $nth {
			$result: append($result, nth($list, $i));
		}
	}

	@return join((), $result, $separator, $bracketed);
}

@function isContentProp($val) {
	@return str-index($val, "-content") != null;
}

@function _transform($map, $path, $delim: $defaultStateDelim) {
	$result: ();

	@each $key, $value in $map {
		$variable-name: if($path, "#{$path}-#{$key}", "#{$key}");

		// handle states path
		@if str-index($path, $delim) {
			$split: string.split($path, $delim);
			$prefix: nth($split, 1);
			$stateList: _removeNth($split, 1);
			$states: "";

			@each $state in $stateList {
				$states: #{$states}#{$delim}#{$state};
			}

			$variable-name: #{$prefix}#{$key}#{$states};
		}

		@if type-of($value) == map {
			$result: map-merge($result, _transform($value, $variable-name));
		} @else {
			// unquote all values, except special case of `content` properties,
			// that should be in quotes. This is to support handling of quoted strings
			// (e.g. font families)
			@if type-of($value) == "string" and not isContentProp($key) {
				$value: string.unquote($value);
			}

			$result: map-merge(
				$result,
				(
					refs.cssVar(#{$variable-name}): $value,
				)
			);
		}
	}

	@return $result;
}

@mixin _parse($vars) {
	@each $key, $val in $vars {
		@if _isEmptyVarMap($val) {
			@error #{empty theme vars object #{":"}$key};
		} @else {
			#{$key}: $val;
		}
	}
}

@mixin compile($exports, $prefix: "", $delim: $defaultStateDelim) {
	@each $vars in $exports {
		@include _parse((_transform($vars, refs.prefix($prefix), $delim)));
	}
}
