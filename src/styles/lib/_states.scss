@use "sass:map";
@use "sass:list";
@import "../config/consts";
@import "./merge";

// base component states
$COMPONENT_STATES: (
	hovered: hover,
	clicked: active,
	selected: selected,
);

$states: $COMPONENT_STATES;

@function _strReplace($string, $search, $replace: "") {
	$index: str-index($string, $search);

	@if $index {
		@return str-slice($string, 1, $index - 1) + $replace +
			_strReplace(
				str-slice($string, $index + str-length($search)),
				$search,
				$replace
			);
	}

	@return $string;
}

@function customStates($states) {
	$output-map: ();

	@each $key in map-keys($states) {
		$state: map-get($states, $key);
		$val: $state;

		@if (type-of($state) == "list") {
			$s: "";
			@each $stateMap in $state {
				@each $st in $stateMap {
					$idx: list.index($stateMap, $st);
					$stateDelim: if($idx == 1, "", $theme-state-delim);
					$s: #{$s}#{$stateDelim}#{$st};
				}
			}
			$val: $s;
		}

		$transformed-value: _strReplace($val, $val, #{$theme-state-delim}#{$val});

		$output-map: map-merge(
			$output-map,
			(
				$key: $transformed-value,
			)
		);
	}

	@return $output-map;
}

@function state($state, $customStateMap: ()) {
	$compState: map-get(customStates(deep($states, $customStateMap)), $state);

	@if $compState != null {
		@return $compState;
	}

	@warn Undefined state "#{$state}" in component;
	@return $state;
}
