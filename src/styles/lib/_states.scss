@use 'sass:map';
@use 'sass:list';
@use 'sass:string';
@import '../config/consts';
@import './merge';

// base component states
$COMPONENT_STATES: (
	hovered: hover,
	clicked: active,
	selected: selected,
);
$states: $COMPONENT_STATES;

@function -str-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		$searchLn: string.length($search);
		$replaced: -str-replace(
			string.slice($string, $index + $searchLn),
			$search,
			$replace
		);

		@return string.slice($string, 1, $index - 1) + $replace + $replaced;
	}

	@return $string;
}

@function custom-states($states) {
	$output-map: ();

	@each $key in map.keys($states) {
		$state: map.get($states, $key);
		$val: $state;

		@if type-of($state) == 'list' {
			$s: '';

			@each $stateMap in $state {
				@each $st in $stateMap {
					$idx: list.index($stateMap, $st);
					$stateDelim: if($idx == 1, '', $theme-state-delim);
					$s: #{$s}#{$stateDelim}#{$st};
				}
			}

			$val: $s;
		}

		$transformed-value: -str-replace($val, $val, #{$theme-state-delim}#{$val});
		$output-map: map.merge(
			$output-map,
			(
				$key: $transformed-value,
			)
		);
	}

	@return $output-map;
}

@function state($state, $customStateMap: ()) {
	$compState: map.get(custom-states(deep($states, $customStateMap)), $state);

	/* stylelint-disable scss/at-if-no-null */
	@if $compState != null {
		@return $compState;
	}

	@warn #{Undefined state "#{$state}" in component};
	@return $state;
}
