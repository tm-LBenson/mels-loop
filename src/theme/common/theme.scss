$color2: #f2efe4;
$color6: #666560;

$factor0: 25%;

@function contrastText($color) {
	$result: invert($color);
	$lightness: lightness($result);
	@if ($lightness < 50) {
		$result: $color6;
	} @else {
		$result: $color2;
	}
	@return $result;
}

@function createColorMap($color, $percentage) {
	$map: (
		main: $color,
		light: lighten($color, $percentage),
		dark: darken($color, $percentage),
		contrast: contrastText($color),
	);
	@return $map;
}

@mixin Theme($theme) {
	$pallette: (
		surface: map-get(map-get($theme, colors), surface),
		primary: map-get(map-get($theme, colors), primary),
		secondary: map-get(map-get($theme, colors), secondary),
		link: map-get(map-get($theme, colors), link),
		error: map-get(map-get($theme, colors), error),
		success: map-get(map-get($theme, colors), success),
	);

	$colors-map: ();

	@each $key, $value in $pallette {
		$map: ();
		$map: map-merge(
			$map,
			(
				$key: createColorMap($value, $factor0),
			)
		);
		$colors-map: map-merge($colors-map, $map);
	}

	background-color: map-get(map-get($colors-map, surface), main);

	@include Typography($colors-map);
}

@mixin Typography(
	$colors: (
		surface,
		primary,
		secondary,
		link,
		error,
		success,
	)
) {
	h1,
	h2,
	h3,
	h4,
	h5,
	h6 {
		color: map-get(map-get($colors, surface), contrast);
	}

	[data-link-type],
	a {
		color: map-get(map-get($colors, link), main);
		&:link,
		&:visited {
			color: map-get(map-get($colors, link), main);
		}
		&:hover {
			color: map-get(map-get($colors, link), dark);
		}
		&:active {
			color: map-get(map-get($colors, link), light);
		}
	}

	p {
		color: map-get(map-get($colors, surface), contrast);
	}

	// // COMPONENTS
	// .code pre {
	// 	background: colors.$surface-light;
	// 	padding: 1rem;
	// }

	// p {
	// 	color: colors.$surface-contrast;
	// }

	// blockquote {
	// 	color: colors.$surface-contrast;
	// }
}
